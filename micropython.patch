diff --git a/ports/esp8266/Makefile b/ports/esp8266/Makefile
index 0bbb990d2..de426bdaf 100644
--- a/ports/esp8266/Makefile
+++ b/ports/esp8266/Makefile
@@ -7,7 +7,7 @@ MICROPY_PY_USSL = 1
 MICROPY_SSL_AXTLS = 1
 AXTLS_DEFS_EXTRA = -Dabort=abort_ -DRT_MAX_PLAIN_LENGTH=1024 -DRT_EXTRA=4096
 MICROPY_FATFS = 1
-MICROPY_PY_BTREE = 1
+MICROPY_PY_BTREE = 0
 BTREE_DEFS_EXTRA = -DDEFPSIZE=1024 -DMINCACHE=3
 
 FROZEN_DIR ?= scripts
diff --git a/ports/esp8266/modules/webrepl.py b/ports/esp8266/modules/webrepl.py
deleted file mode 100644
index aa156d148..000000000
--- a/ports/esp8266/modules/webrepl.py
+++ /dev/null
@@ -1,79 +0,0 @@
-# This module should be imported from REPL, not run from command line.
-import socket
-import uos
-import network
-import websocket
-import websocket_helper
-import _webrepl
-
-listen_s = None
-client_s = None
-
-def setup_conn(port, accept_handler):
-    global listen_s
-    listen_s = socket.socket()
-    listen_s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
-
-    ai = socket.getaddrinfo("0.0.0.0", port)
-    addr = ai[0][4]
-
-    listen_s.bind(addr)
-    listen_s.listen(1)
-    if accept_handler:
-        listen_s.setsockopt(socket.SOL_SOCKET, 20, accept_handler)
-    for i in (network.AP_IF, network.STA_IF):
-        iface = network.WLAN(i)
-        if iface.active():
-            print("WebREPL daemon started on ws://%s:%d" % (iface.ifconfig()[0], port))
-    return listen_s
-
-
-def accept_conn(listen_sock):
-    global client_s
-    cl, remote_addr = listen_sock.accept()
-    prev = uos.dupterm(None)
-    uos.dupterm(prev)
-    if prev:
-        print("\nConcurrent WebREPL connection from", remote_addr, "rejected")
-        cl.close()
-        return
-    print("\nWebREPL connection from:", remote_addr)
-    client_s = cl
-    websocket_helper.server_handshake(cl)
-    ws = websocket.websocket(cl, True)
-    ws = _webrepl._webrepl(ws)
-    cl.setblocking(False)
-    # notify REPL on socket incoming data
-    cl.setsockopt(socket.SOL_SOCKET, 20, uos.dupterm_notify)
-    uos.dupterm(ws)
-
-
-def stop():
-    global listen_s, client_s
-    uos.dupterm(None)
-    if client_s:
-        client_s.close()
-    if listen_s:
-        listen_s.close()
-
-
-def start(port=8266, password=None):
-    stop()
-    if password is None:
-        try:
-            import webrepl_cfg
-            _webrepl.password(webrepl_cfg.PASS)
-            setup_conn(port, accept_conn)
-            print("Started webrepl in normal mode")
-        except:
-            print("WebREPL is not configured, run 'import webrepl_setup'")
-    else:
-        _webrepl.password(password)
-        setup_conn(port, accept_conn)
-        print("Started webrepl in manual override mode")
-
-
-def start_foreground(port=8266):
-    stop()
-    s = setup_conn(port, None)
-    accept_conn(s)
diff --git a/ports/esp8266/modules/webrepl_setup.py b/ports/esp8266/modules/webrepl_setup.py
deleted file mode 100644
index 129313a21..000000000
--- a/ports/esp8266/modules/webrepl_setup.py
+++ /dev/null
@@ -1,102 +0,0 @@
-import sys
-#import uos as os
-import os
-import machine
-
-RC = "./boot.py"
-CONFIG = "./webrepl_cfg.py"
-
-def input_choice(prompt, choices):
-    while 1:
-        resp = input(prompt)
-        if resp in choices:
-            return resp
-
-def getpass(prompt):
-    return input(prompt)
-
-def input_pass():
-    while 1:
-        passwd1 = getpass("New password (4-9 chars): ")
-        if len(passwd1) < 4 or len(passwd1) > 9:
-            print("Invalid password length")
-            continue
-        passwd2 = getpass("Confirm password: ")
-        if passwd1 == passwd2:
-            return passwd1
-        print("Passwords do not match")
-
-
-def exists(fname):
-    try:
-        with open(fname):
-            pass
-        return True
-    except OSError:
-        return False
-
-
-def get_daemon_status():
-    with open(RC) as f:
-        for l in f:
-            if "webrepl" in l:
-                if l.startswith("#"):
-                    return False
-                return True
-        return None
-
-
-def change_daemon(action):
-    LINES = ("import webrepl", "webrepl.start()")
-    with open(RC) as old_f, open(RC + ".tmp", "w") as new_f:
-        found = False
-        for l in old_f:
-            for patt in LINES:
-                if patt in l:
-                    found = True
-                    if action and l.startswith("#"):
-                        l = l[1:]
-                    elif not action and not l.startswith("#"):
-                        l = "#" + l
-            new_f.write(l)
-        if not found:
-            new_f.write("import webrepl\nwebrepl.start()\n")
-    # FatFs rename() is not POSIX compliant, will raise OSError if
-    # dest file exists.
-    os.remove(RC)
-    os.rename(RC + ".tmp", RC)
-
-
-def main():
-    status = get_daemon_status()
-
-    print("WebREPL daemon auto-start status:", "enabled" if status else "disabled")
-    print("\nWould you like to (E)nable or (D)isable it running on boot?")
-    print("(Empty line to quit)")
-    resp = input("> ").upper()
-
-    if resp == "E":
-        if exists(CONFIG):
-            resp2 = input_choice("Would you like to change WebREPL password? (y/n) ", ("y", "n", ""))
-        else:
-            print("To enable WebREPL, you must set password for it")
-            resp2 = "y"
-
-        if resp2 == "y":
-            passwd = input_pass()
-            with open(CONFIG, "w") as f:
-                f.write("PASS = %r\n" % passwd)
-
-
-    if resp not in ("D", "E") or (resp == "D" and not status) or (resp == "E" and status):
-        print("No further action required")
-        sys.exit()
-
-    change_daemon(resp == "E")
-
-    print("Changes will be activated after reboot")
-    resp = input_choice("Would you like to reboot now? (y/n) ", ("y", "n", ""))
-    if resp == "y":
-        machine.reset()
-
-main()
diff --git a/ports/esp8266/mpconfigport.h b/ports/esp8266/mpconfigport.h
index 890c4069e..8182bb72d 100644
--- a/ports/esp8266/mpconfigport.h
+++ b/ports/esp8266/mpconfigport.h
@@ -87,7 +87,7 @@
 #define MICROPY_PY_MACHINE_SPI      (1)
 #define MICROPY_PY_MACHINE_SPI_MAKE_NEW machine_hspi_make_new
 #define MICROPY_PY_WEBSOCKET        (1)
-#define MICROPY_PY_WEBREPL          (1)
+#define MICROPY_PY_WEBREPL          (0)
 #define MICROPY_PY_WEBREPL_DELAY    (20)
 #define MICROPY_PY_FRAMEBUF         (1)
 #define MICROPY_PY_MICROPYTHON_MEM_INFO (1)
